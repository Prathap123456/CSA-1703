import heapq

class Node:
    def __init__(self, name, g_cost, h_cost, parent=None):
        self.name = name  # The node name or position (e.g., (x, y) coordinates)
        self.g_cost = g_cost  # The cost from the start node
        self.h_cost = h_cost  # The heuristic cost to the goal
        self.f_cost = g_cost + h_cost  # f(n) = g(n) + h(n)
        self.parent = parent  # The parent node from which we came to this node

    def __lt__(self, other):
        return self.f_cost < other.f_cost  # Compare nodes based on f_cost for priority queue

def a_star(start, goal, graph, heuristic):
    open_list = []  # Priority queue for nodes to be explored
    closed_list = set()  # Set to keep track of explored nodes
    
    # Start node setup
    start_node = Node(start, 0, heuristic[start], None)
    heapq.heappush(open_list, start_node)
    
    while open_list:
        current_node = heapq.heappop(open_list)  # Get node with lowest f_cost
        
        # If we reached the goal, reconstruct the path
        if current_node.name == goal:
            path = []
            while current_node:
                path.append(current_node.name)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path (from start to goal)
        
        closed_list.add(current_node.name)  # Mark the node as explored
        
        # Explore neighbors
        for neighbor, cost in graph[current_node.name].items():
            if neighbor in closed_list:
                continue  # Skip already explored nodes
            
            g_cost = current_node.g_cost + cost  # Calculate g(n) for the neighbor
            h_cost = heuristic.get(neighbor, 0)  # Get heuristic for the neighbor
            
            neighbor_node = Node(neighbor, g_cost, h_cost, current_node)
            
            # Check if this neighbor is already in the open list with a lower f_cost
            if not any(node.name == neighbor and node.f_cost <= neighbor_node.f_cost for node in open_list):
                heapq.heappush(open_list, neighbor_node)
    
    return None  # If no path is found

# Example graph with nodes and edge costs (adjacency list)
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

# Example heuristic values for each node (estimated distance to goal)
heuristic = {
    'A': 7,  # Estimated distance from A to goal (D)
    'B': 6,  # Estimated distance from B to goal (D)
    'C': 2,  # Estimated distance from C to goal (D)
    'D': 0   # Goal node D has 0 heuristic value
}

# Start node and goal node
start_node = 'A'
goal_node = 'D'

# Call A* algorithm
path = a_star(start_node, goal_node, graph, heuristic)

# Output the result
if path:
    print(f"Path found: {path}")
else:
    print("No path found.")
