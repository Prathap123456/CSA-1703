def heuristic(state):
    print ("K.Prathap 192210379")
    return sum(abs((int(c)-1) % 3 - i % 3) + abs((int(c)-1) // 3 - i // 3)
               for i, c in enumerate(state) if c != '0')

def get_neighbors(state):
    i = state.index('0')
    moves = []
    for d, j in {'U': -3, 'D': 3, 'L': -1, 'R': 1}.items():
        ni = i + j
        if 0 <= ni < 9 and not (i % 3 == 0 and d == 'L') and not (i % 3 == 2 and d == 'R'):
            l = list(state)
            l[i], l[ni] = l[ni], l[i]
            moves.append(''.join(l))
    return moves

def print_board(state):
    for i in range(0, 9, 3):
        print(' '.join(state[i:i+3]).replace('0', ' '))
    print()

def solve(start):
    pq, seen = [(heuristic(start), 0, start, [])], set()
    while pq:
        _, g, state, path = heapq.heappop(pq)
        if state in seen: continue
        seen.add(state)
        if state == goal:
            full_path = path + [state]
            print(f"Total moves: {len(full_path) - 1}\n")
            for idx, s in enumerate(full_path):
                print(f"Step {idx}:")
                print_board(s)
            return
        for neighbor in get_neighbors(state):
            heapq.heappush(pq, (g + 1 + heuristic(neighbor), g + 1, neighbor, path + [state]))

# Example input
start_state = '724506831'
solve(start_state)

