# DFS Implementation using recursion
def dfs(graph, node, visited=None):
    if visited is None:
        visited = set()  # Set to track visited nodes
    
    # Mark the node as visited
    visited.add(node)
    
    # Print the visited node
    print(f"Visited: {node}")
    
    # Recur for all the neighbors of the current node
    for neighbor in graph[node]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

# Example graph represented as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Call DFS starting from node 'A'
dfs(graph, 'A')
